package helpingMethods

import (
	"gopkg.in/telebot.v3"
	"play_portal_bot/internal/databaseModels"
	"play_portal_bot/internal/loggers"
	"play_portal_bot/pkg/utils/structures"
	"strconv"
)

// CreateOrder —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ—Ä–æ—á–µ —à–æ–± –≤—Å–µ –æ–∫ –±—ã–ª–æ
func CreateOrder(c telebot.Context) error {
	if !CheckIfIsInteracting(c.Chat().ID) {
		return nil
	}

	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := &structures.MessageData{
		Custom: strconv.Itoa(int(c.Chat().ID)),
		Price:  int(structures.UserStates[c.Chat().ID].Price),
	}
	messageContent := "–ó–∞–∫–∞–∑ CO4DOM81K3 –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\nüìù –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è. –ü–æ—ç—Ç–æ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –æ—Ç–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–µ—Ç–∏ –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑! –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ ‚ù§Ô∏è"
	commands := [][]structures.Command{
		{
			{Text: "–û—Ç–≤–µ—Ç–∏—Ç—å", Command: structures.Commands["respondToOrder"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: messageContent,
	}
	keyboard := CreateInline(data, commands...)
	c.Send(msg)
	msg.Caption = data.Custom + structures.UserStates[c.Chat().ID].Type + structures.UserStates[c.Chat().ID].DataCase[0] + structures.UserStates[c.Chat().ID].DataCase[1]
	//TODO: —É–±–∏—Ä–∞—Ç—å —é–∑–µ—Ä—Å—Ç–µ–π—Ç—ã –±–ª—è—Ç—å —Ç–∞–º –≥–¥–µ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–¥ –≤ –±—É–¥—É—â–µ–º, —é–∑–µ—Ä—Å—Ç–µ–π—Ç –æ–Ω–ª–∏ –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
	for _, moderator := range structures.Moderators {
		moderChat, _ := strconv.Atoi(moderator)
		_, err := c.Bot().Send(telebot.ChatID(moderChat), msg, keyboard)
		if err != nil {
			loggers.ErrorLogger.Println(err)
			return err
		}
	}
	return nil
}

// RespondToOrder —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func RespondToOrder(c telebot.Context) error {
	if !CheckIfIsInteracting(c.Chat().ID) {
		return nil
	}

	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := ParseData(c.Callback().Data)
	commands := [][]structures.Command{
		{
			{Text: "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–∫–∞–∑ —Å —Ö—É–π–ª–∞–Ω–æ–º", Command: structures.Commands["endOrder"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	interactionChatID, _ := strconv.Atoi(data.Custom)

	if state, ok := structures.UserStates[int64(interactionChatID)]; ok && state.Type == "moderatorDialog" {
		c.Send("–î—Ä—É–≥–æ–π –º–æ–¥–µ—Ä –∑–∞–Ω—è—Ç –≥–∞–Ω–¥–æ–Ω–æ–º")
		return nil
	}

	currentInteraction := &structures.UserInteraction{
		IsInteracting: true,
		Type:          "moderatorDialog",
		DataCase:      []string{strconv.FormatInt(c.Chat().ID, 10)}, //representing user
	}
	structures.UserStates[int64(interactionChatID)] = currentInteraction

	currentModerInteraction := &structures.UserInteraction{
		IsInteracting: true,
		Type:          "moderatorDialog",
		DataCase:      []string{strconv.FormatInt(int64(interactionChatID), 10)}, //representing moder
		Price:         float64(data.Price),
	}
	structures.UserStates[c.Chat().ID] = currentModerInteraction
	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: "–í—ã –Ω–∞—á–∞–ª–∏ –æ–±—Ä–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /endOrder –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
	}
	keyboard := CreateInline(data, commands...)
	_, err := c.Bot().Send(telebot.ChatID(c.Chat().ID), msg, keyboard)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	msg.Caption = "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è"
	_, err = c.Bot().Send(telebot.ChatID(int64(interactionChatID)), msg)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	return nil
}

// EndOrder –º–æ–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–∂–∏–º–∞–µ—Ç —ç—Ç—É –∫–Ω–æ–ø–∫—É
func EndOrder(c telebot.Context) error { //TODO: –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∏–∑ –±–¥, –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å —é–∑–µ—Ä–∞ –∏ —Ç.–¥
	if !CheckIfIsInteracting(c.Chat().ID) {
		return nil
	}
	convFrom, _ := strconv.Atoi(structures.UserStates[c.Chat().ID].DataCase[0])

	_, err := databaseModels.Users.ConsumeBalance(c.Chat().ID, float64(structures.UserStates[c.Chat().ID].Price))
	if err != nil {
		loggers.ErrorLogger.Println(err)
		c.Bot().Send(telebot.ChatID(convFrom), "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–¥")
		return err
	}
	if c.Callback() == nil {
		messageData1 := &structures.MessageData{
			Command:     structures.Commands["mainMenu"],
			PrevCommand: "",
			Price:       0,
			Custom:      "",
		}
		messageData2 := &structures.MessageData{
			Command:     structures.Commands["mainMenu"],
			PrevCommand: "",
			Price:       0,
			Custom:      "",
		}
		picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
		commands := [][]structures.Command{
			{
				{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Command: structures.Commands["mainMenu"]},
			}}

		delete(structures.UserStates, c.Chat().ID)
		delete(structures.UserStates, int64(convFrom))

		msg := &telebot.Photo{
			File:    telebot.FromDisk(picPath),
			Caption: "–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –¥–∏–∞–ª–æ–≥",
		}
		keyboard1 := CreateInline(messageData1, commands...)
		c.Bot().Send(telebot.ChatID(c.Chat().ID), msg, keyboard1)

		msg.Caption = "–° –≤–∞–º–∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –¥–∏–∞–ª–æ–≥"
		keyboard2 := CreateInline(messageData2, commands...)
		c.Bot().Send(telebot.ChatID(convFrom), msg, keyboard2)
		return nil
	}
	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := ParseData(c.Callback().Data)
	commands := [][]structures.Command{
		{
			{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Command: structures.Commands["mainMenu"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	//interactionChatID, _ := strconv.Atoi(data.Custom)

	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: "–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –¥–∏–∞–ª–æ–≥",
	}
	//convFrom, _ := strconv.Atoi(structures.UserStates[int64(interactionChatID)].DataCase[0])

	delete(structures.UserStates, c.Chat().ID)
	delete(structures.UserStates, int64(convFrom))

	keyboard := CreateInline(data, commands...)

	c.Bot().Send(telebot.ChatID(int64(convFrom)), msg, keyboard)

	msg.Caption = "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!!!!!"
	c.Bot().Send(telebot.ChatID(convFrom), msg, keyboard)
	return nil
}
