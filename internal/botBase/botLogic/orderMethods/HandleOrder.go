package orderMethods

import (
	"fmt"
	"gopkg.in/telebot.v3"
	"play_portal_bot/internal/botBase/helpingMethods"
	"play_portal_bot/internal/databaseModels"
	"play_portal_bot/internal/loggers"
	"play_portal_bot/pkg/utils/structures"
	"strconv"
	"time"
)

// CreateOrder —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ—Ä–æ—á–µ —à–æ–± –≤—Å–µ –æ–∫ –±—ã–ª–æ
func CreateOrder(c telebot.Context) error {
	if !helpingMethods.CheckIfIsInteracting(c.Chat().ID) {
		return nil
	}

	newOrderID := helpingMethods.RandStringRunes(16)
	_, err := databaseModels.Orders.CreateOrder(c.Chat().ID, newOrderID, structures.UserStates[c.Chat().ID].Price, structures.UserStates[c.Chat().ID].Order)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}

	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := &structures.MessageData{
		Custom: newOrderID,
		Price:  int(structures.UserStates[c.Chat().ID].Price),
	}
	messageContent := fmt.Sprintf("–ó–∞–∫–∞–∑ %v –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\nüìù –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è. –ü–æ—ç—Ç–æ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –æ—Ç–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–µ—Ç–∏ –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑! –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥—ë—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ ‚ù§Ô∏è", newOrderID)
	commands := [][]structures.Command{
		{
			{Text: "–û—Ç–≤–µ—Ç–∏—Ç—å", Command: structures.Commands["respondToOrder"]}},
	}
	userCommands := [][]structures.Command{
		{
			{Text: "–Ø –≤ —Å–µ—Ç–∏", Command: structures.Commands["pingModer"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: messageContent,
	}
	keyboard := helpingMethods.CreateInline(data, commands...)
	keyboardForUser := helpingMethods.CreateInline(data, userCommands...)
	c.Send(msg, keyboardForUser)
	price := strconv.Itoa(int(structures.UserStates[c.Chat().ID].Price))
	msg.Caption = data.Command + structures.UserStates[c.Chat().ID].Type + structures.UserStates[c.Chat().ID].DataCase[0] + price

	delete(structures.UserStates, c.Chat().ID)

	for _, moderator := range structures.Moderators {
		moderChat, _ := strconv.Atoi(moderator)
		_, err := c.Bot().Send(telebot.ChatID(moderChat), msg, keyboard)
		if err != nil {
			loggers.ErrorLogger.Println(err)
			return err
		}
	}
	return nil
}

// RespondToOrder —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func RespondToOrder(c telebot.Context) error {

	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := helpingMethods.ParseData(c.Callback().Data)
	commands := [][]structures.Command{
		{
			{Text: "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–∫–∞–∑ —Å —Ö—É–π–ª–∞–Ω–æ–º", Command: structures.Commands["endOrder"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	clientOrder, err := databaseModels.Orders.GetOrder(data.Custom)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}

	if state, ok := structures.UserStates[clientOrder.ChatID]; ok && state.Type == "moderatorDialog" {
		c.Send("–î—Ä—É–≥–æ–π –º–æ–¥–µ—Ä –∑–∞–Ω—è—Ç –≥–∞–Ω–¥–æ–Ω–æ–º")
		return nil
	}
	c.Delete()

	currentInteraction := &structures.UserInteraction{
		IsInteracting: true,
		Type:          "moderatorDialog",
		DataCase:      []string{strconv.FormatInt(c.Chat().ID, 10)}, //representing user
	}
	structures.UserStates[clientOrder.ChatID] = currentInteraction

	currentModerInteraction := &structures.UserInteraction{
		IsInteracting: true,
		Type:          "moderatorDialog",
		DataCase:      []string{strconv.FormatInt(clientOrder.ChatID, 10), clientOrder.OrderID}, //representing moder (userOrder)
		//Price:         float64(data.Price),
	}
	structures.UserStates[c.Chat().ID] = currentModerInteraction

	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: "–í—ã –Ω–∞—á–∞–ª–∏ –æ–±—Ä–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /endOrder –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
	}
	keyboard := helpingMethods.CreateInline(data, commands...)
	_, err = c.Bot().Send(telebot.ChatID(c.Chat().ID), msg, keyboard)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	msg.Caption = "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è"
	_, err = c.Bot().Send(telebot.ChatID(clientOrder.ChatID), msg)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	return nil
}

// EndOrder –º–æ–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞–±–æ—Ç—É –∏ –Ω–∞–∂–∏–º–∞–µ—Ç —ç—Ç—É –∫–Ω–æ–ø–∫—É
func EndOrder(c telebot.Context) error {
	if !helpingMethods.CheckIfIsInteracting(c.Chat().ID) {
		return nil
	}
	clientOrder, err := databaseModels.Orders.GetOrder(structures.UserStates[c.Chat().ID].DataCase[1])
	if err != nil {
		loggers.ErrorLogger.Println(err)
		c.Send("–æ—à–∏–±–∫–∞ –≤ –±–¥")
		return err
	}

	_, err = databaseModels.Users.ConsumeBalance(clientOrder.ChatID, clientOrder.Amount)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		c.Bot().Send(telebot.ChatID(c.Chat().ID), "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–¥")
		return err
	}
	_, err = databaseModels.Orders.OrderIsDone(clientOrder.OrderID)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	_, err = databaseModels.Orders.CreateCheck(clientOrder.ChatID, clientOrder.Amount, clientOrder.Custom)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	} //TODO: –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —á–µ–∫
	//======IF VIA /endOrder PART===========
	if c.Callback() == nil {
		messageData1 := &structures.MessageData{
			Command: structures.Commands["mainMenu"],
		}
		messageData2 := &structures.MessageData{
			Command: structures.Commands["mainMenu"],
		}
		picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
		commands := [][]structures.Command{
			{
				{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Command: structures.Commands["mainMenu"]},
			}}

		delete(structures.UserStates, c.Chat().ID)
		delete(structures.UserStates, clientOrder.ChatID)

		msg := &telebot.Photo{
			File:    telebot.FromDisk(picPath),
			Caption: "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–∫–∞–∑",
		}
		keyboard1 := helpingMethods.CreateInline(messageData1, commands...)
		c.Send(msg, keyboard1)

		msg.Caption = "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!!!!!"
		keyboard2 := helpingMethods.CreateInline(messageData2, commands...)
		c.Bot().Send(telebot.ChatID(clientOrder.ChatID), msg, keyboard2)
		return nil
	}
	//======IF VIA /endOrder PART===========

	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := helpingMethods.ParseData(c.Callback().Data) //nil basically
	commands := [][]structures.Command{
		{
			{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Command: structures.Commands["mainMenu"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–∫–∞–∑",
	}

	delete(structures.UserStates, c.Chat().ID)
	delete(structures.UserStates, clientOrder.ChatID)

	keyboard := helpingMethods.CreateInline(data, commands...)

	c.Send("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∑–∞–∫–∞–∑")

	msg.Caption = "–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!!!!!"
	c.Bot().Send(telebot.ChatID(clientOrder.ChatID), msg, keyboard)
	c.Delete()
	return nil
}

func PingModer(c telebot.Context) error {

	// =========PARAMS=========
	picPath := "pkg/utils/data/img/shopImages/gameServices.jpg"
	data := helpingMethods.ParseData(c.Callback().Data)
	messageContent := fmt.Sprintf("–ó–∞–∫–∞–∑ %v –≤ —Å–µ—Ç–∏", c.Chat().ID) //TODO: –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞—Å—Ç–æ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–∫–∞–∑–æ–≤
	commands := [][]structures.Command{
		{
			{Text: "–û—Ç–≤–µ—Ç–∏—Ç—å", Command: structures.Commands["respondToOrder"]}},
	}
	data.PrevCommand = ""
	// =========PARAMS=========

	keyboard := helpingMethods.CreateInline(data, commands...)

	for _, moderator := range structures.Moderators {
		moderChat, _ := strconv.Atoi(moderator)
		_, err := c.Bot().Send(telebot.ChatID(moderChat), messageContent, keyboard)
		if err != nil {
			loggers.ErrorLogger.Println(err)
			return err
		}
	}
	//======MEGA_TIMER_XXX========
	userCommands := [][]structures.Command{
		{
			{Text: "–Ø –≤ —Å–µ—Ç–∏", Command: ""}},
	}
	keyboard = helpingMethods.CreateInline(&structures.MessageData{}, userCommands...)
	msg := &telebot.Photo{
		File:    telebot.FromDisk(picPath),
		Caption: c.Text(),
	}
	err := c.Edit(msg, keyboard)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	time.Sleep(10 * time.Second)
	userCommands = [][]structures.Command{
		{
			{Text: "–Ø –≤ —Å–µ—Ç–∏", Command: structures.Commands["pingModer"]}},
	}
	keyboard = helpingMethods.CreateInline(data, userCommands...)
	err = c.Edit(msg, keyboard)
	if err != nil {
		loggers.ErrorLogger.Println(err)
		return err
	}
	//======MEGA_TIMER_XXX========
	return nil
}
